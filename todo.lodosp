
* all
   - negotiate proper connect data
   - error handling
   - a way to find lu_site

* MDT
   - call mdd_sync(), not osd_sync()

* MDD, OSD
   - ->do_create() to set initial attributes
   - mdd never manipulate striping
   - add ->mdo_sync() and mdd_sync()
   - sanity check/counter for thandle started and not stopped in *osd
   - changelog support

* LOD TODO
   - support for >1K OSTs (dynamic lod_ost in struct lod_device)
!  - ost removal
   - lod_qos_prep_create() to extend striping if file size is too big
   - improve locking in lod_qos_statfs_update()
   - lod_qos_statfs_update() to recalculate space with fixed block size
   - qos_add_tgt() to learn configuration (how OSTs map OSSs)
   - pass next device in all the methods (like cursor, lod_trans_stop(), etc)
   - lod_xattr_set() to make sure new striping is sane
   - lod_*_xattr_set() to handle replay case
   - check all users of ld_active_tgt_count/ltd_active, remove using of that

* OSP TODO
!  - adaptive precreation (shouldn't block in most cases), tunables in procfs
   - support for CMD (group = mds #) (where do we take mds #? encoded in config?)
   - batching in osp_sync.c so that the thread doesn't wake up for a single job
!  - at umount be able to abort in-flight PRCs
!  - in RPC interpret/commit callbacks handle errors
   - don't wake up the thread if precreation RPC is in-flight
!  - send uid/gid changes immediately?
   - probably a mechanism to learn committness ASAP?
!  - start orphan cleanup from osp_recovery_complete()
   - osp_sync() to flush changes to OST
!  - batch support
   - resend in osp_object_truncate()


* tests
   - s/lov/lod/
   - s/osc/osp/
   - replay-* tests


* testing scenarios
   - OSP's window of ids is empty
   - umount with RPC (precreation, statfs, destroy, setattr) in flight
   - server and client with different byte order
   - lov ea refers removed/inactive ost: unlink, chown
   - ost failover: how osp handles this

Questions:
   - how do we do if none of OSP can provide with an object ?
   - what do we do if number of objects we can get at the moment is
     less when required for the given pattern?
   - how do we control ltd_active?
   - how to test QoS/RR
   - how do we block in creation till at least one OST is connected?
   - what ->statfs() returns when connection is down?
   - clear method to specify to lod whether striping is needed
   - how to do with destroy/setattr if ost is inactive
     



Lustre: DEBUG MARKER: sanity test_27p: @@@@@@ FAIL: append failed
Lustre: DEBUG MARKER: sanity test_27p: @@@@@@ FAIL: checkstat failed
Lustre: DEBUG MARKER: sanity test_27x: @@@@@@ FAIL: OST0 was degraded but new created file still use it
Lustre: DEBUG MARKER: sanity test_27x: @@@@@@ FAIL: test_27x failed with 3
Lustre: DEBUG MARKER: sanity test_56a: @@@@@@ FAIL: lfs getstripe --obd wrong: found 6, expected 3


Lustre: DEBUG MARKER: sanity test_127: @@@@@@ FAIL: Missing read_bytes stats
Lustre: DEBUG MARKER: sanity test_127: @@@@@@ FAIL: Missing write_bytes stats


