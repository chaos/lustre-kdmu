diff -up linux-2.6.18-164/fs/ext4/ext4.h linux-2.6.18-164/fs/ext4/ext4.h
--- linux-2.6.18-164/fs/ext4/ext4.h	2009-10-16 23:26:25.000000000 +0800
+++ linux-2.6.18-164/fs/ext4/ext4.h	2009-10-16 23:31:41.000000000 +0800
@@ -539,6 +539,7 @@ do {									       \
 #define EXT4_MOUNT_QUOTA		0x80000 /* Some quota option set */
 #define EXT4_MOUNT_USRQUOTA		0x100000 /* "old" user quota */
 #define EXT4_MOUNT_GRPQUOTA		0x200000 /* "old" group quota */
+#define EXT4_MOUNT_EXTENTS		0x400000 /* Extents support */
 #define EXT4_MOUNT_JOURNAL_CHECKSUM	0x800000 /* Journal checksums */
 #define EXT4_MOUNT_JOURNAL_ASYNC_COMMIT	0x1000000 /* Journal Async Commit */
 #define EXT4_MOUNT_I_VERSION            0x2000000 /* i_version support */
diff -up linux-2.6.18-164/fs/ext4/ext4_jbd2.h linux-2.6.18-164/fs/ext4/ext4_jbd2.h
--- linux-2.6.18-164/fs/ext4/ext4_jbd2.h	2009-10-16 23:26:25.000000000 +0800
+++ linux-2.6.18-164/fs/ext4/ext4_jbd2.h	2009-10-16 23:32:02.000000000 +0800
@@ -33,7 +33,7 @@
 
 #define EXT4_SINGLEDATA_TRANS_BLOCKS(sb)				\
 	(EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)   \
-	 ? 27U : 8U)
+		|| test_opt(sb, EXTENTS) ? 27U : 8U)
 
 /* Indicate that EXT4_SINGLEDATA_TRANS_BLOCKS takes the sb as argument */
 #define EXT4_SINGLEDATA_TRANS_BLOCKS_HAS_SB
diff -up linux-2.6.18-164/fs/ext4/extents.c linux-2.6.18-164/fs/ext4/extents.c
--- linux-2.6.18-164/fs/ext4/extents.c	2009-10-16 23:26:25.000000000 +0800
+++ linux-2.6.18-164/fs/ext4/extents.c	2009-10-16 23:33:36.000000000 +0800
@@ -2313,7 +2313,7 @@ void ext4_ext_init(struct super_block *s
 	 * possible initialization would be here
 	 */
 
-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 		printk(KERN_INFO "EXT4-fs: file extents enabled");
 #ifdef AGGRESSIVE_TEST
 		printk(", aggressive tests");
@@ -2338,7 +2338,7 @@ void ext4_ext_init(struct super_block *s
  */
 void ext4_ext_release(struct super_block *sb)
 {
-	if (!EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+	if (!test_opt(sb, EXTENTS))
 		return;
 
 #ifdef EXTENTS_STATS
diff -up linux-2.6.18-164/fs/ext4/ialloc.c linux-2.6.18-164/fs/ext4/ialloc.c
--- linux-2.6.18-164/fs/ext4/ialloc.c	2009-10-16 23:26:25.000000000 +0800
+++ linux-2.6.18-164/fs/ext4/ialloc.c	2009-10-16 23:34:38.000000000 +0800
@@ -938,7 +938,7 @@ got:
 	if (err)
 		goto fail_free_drop;
 
-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 		/* set extent flag only for directory, file and normal symlink*/
 		if (S_ISDIR(mode) || S_ISREG(mode) || S_ISLNK(mode)) {
 			EXT4_I(inode)->i_flags |= EXT4_EXTENTS_FL;
diff -up linux-2.6.18-164/fs/ext4/migrate.c linux-2.6.18-164/fs/ext4/migrate.c
--- linux-2.6.18-164/fs/ext4/migrate.c	2009-09-28 16:11:26.000000000 +0800
+++ linux-2.6.18-164/fs/ext4/migrate.c	2009-10-16 23:36:49.000000000 +0800
@@ -459,13 +459,13 @@ int ext4_ext_migrate(struct inode *inode
 	struct list_blocks_struct lb;
 	unsigned long max_entries;
 
-	/*
-	 * If the filesystem does not support extents, or the inode
-	 * already is extent-based, error out.
-	 */
-	if (!EXT4_HAS_INCOMPAT_FEATURE(inode->i_sb,
-				       EXT4_FEATURE_INCOMPAT_EXTENTS) ||
-	    (EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL))
+	if (!test_opt(inode->i_sb, EXTENTS))
+		/*
+		 * if mounted with noextents we don't allow the migrate
+		 */
+		return -EINVAL;
+
+	if ((EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL))
 		return -EINVAL;
 
 	if (S_ISLNK(inode->i_mode) && inode->i_blocks == 0)
diff -up linux-2.6.18-164/fs/ext4/super.c linux-2.6.18-164/fs/ext4/super.c
--- linux-2.6.18-164/fs/ext4/super.c	2009-10-16 23:26:25.000000000 +0800
+++ linux-2.6.18-164/fs/ext4/super.c	2009-10-16 23:48:19.000000000 +0800
@@ -849,6 +849,8 @@ static int ext4_show_options(struct seq_
 		seq_puts(seq, ",journal_async_commit");
 	if (test_opt(sb, NOBH))
 		seq_puts(seq, ",nobh");
+	if (!test_opt(sb, EXTENTS))
+		seq_puts(seq, ",noextents");
 	if (test_opt(sb, I_VERSION))
 		seq_puts(seq, ",i_version");
 	if (!test_opt(sb, DELALLOC))
@@ -1334,6 +1336,7 @@ enum {
 	Opt_inode_readahead_blks, Opt_journal_ioprio,
 	Opt_iopen, Opt_noiopen, Opt_iopen_nopriv, Opt_bigendian_extents,
 	Opt_force_over_16tb,
+	Opt_extents, Opt_noextents,
 };
 
 static match_table_t tokens = {
@@ -1401,6 +1404,8 @@ static match_table_t tokens = {
 	{Opt_noauto_da_alloc, "noauto_da_alloc"},
 	{Opt_bigendian_extents, "bigendian_extents"},
 	{Opt_force_over_16tb, "force_over_16tb"},
+	{Opt_extents, "extents"},
+	{Opt_noextents, "noextents"},
 	{Opt_err, NULL},
 };
 
@@ -1441,6 +1446,7 @@ static int parse_options(char *options, 
 	int qtype, qfmt;
 	char *qname;
 #endif
+	ext4_fsblk_t last_block;
 
 	if (!options)
 		return 1;
@@ -1829,6 +1835,33 @@ set_qf_format:
 		case Opt_force_over_16tb:
 			force_over_16tb = 1;
 			break;
+		case Opt_extents:
+			if (!EXT4_HAS_INCOMPAT_FEATURE(sb,
+					EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+				ext4_warning(sb, __func__,
+					"extents feature not enabled "
+					"on this filesystem, use tune2fs");
+				return 0;
+			}
+			set_opt(sbi->s_mount_opt, EXTENTS);
+			break;
+		case Opt_noextents:
+			/*
+			 * When e2fsprogs support resizing an already existing
+			 * ext3 file system to greater than 2**32 we need to
+			 * add support to block allocator to handle growing
+			 * already existing block  mapped inode so that blocks
+			 * allocated for them fall within 2**32
+			*/
+			last_block = ext4_blocks_count(sbi->s_es) - 1;
+			if (last_block  > 0xffffffffULL) {
+				printk(KERN_ERR "EXT4-fs: Filesystem too "
+					"large to mount with "
+					"-o noextents options\n");
+				return 0;
+			}
+			clear_opt(sbi->s_mount_opt, EXTENTS);
+			break;
 		default:
 			printk(KERN_ERR
 			       "EXT4-fs: Unrecognized mount option \"%s\" "
@@ -2501,6 +2534,18 @@ static int ext4_fill_super(struct super_
 	set_opt(sbi->s_mount_opt, BARRIER);
 
 	/*
+	 * turn on extents feature by default in ext4 filesystem
+	 * only if feature flag already set by mkfs or tune2fs.
+	 * Use -o noextents to turn it off
+	*/
+	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+		set_opt(sbi->s_mount_opt, EXTENTS);
+	else
+		ext4_warning(sb, __func__,
+			"extents feature not enabled on this filesystem, "
+			"use tune2fs.");
+
+	/*
 	 * enable delayed allocation by default
 	 * Use -o nodelalloc to turn it off
 	 */
