# This file is included by each package's toplevel autoMakefile[.am],
# which must define SUBDIRS as a minimum.

AUTOMAKE_OPTIONS = foreign

FIND_TAG_FILES_CMD = find $(top_srcdir) \
		     -path $(top_srcdir)/ldiskfs/ldiskfs/linux-stage -prune -false -o\
		     -type f -name '*.[hc]'

# these empty rules are needed so that automake doesn't add its own
# recursive rules
etags-recursive:

ctags-recursive:

tags-recursive:

TAGS: etags

tags: ctags etags

etags:
	$(RM) $(top_srcdir)/TAGS
	ETAGSF=`etags --version | grep -iq exuberant && \
		echo "-I __initdata,__exitdata,EXPORT_SYMBOL"`; \
	$(FIND_TAG_FILES_CMD) | xargs etags $$ETAGSF -a

ctags:
	$(RM) $(top_srcdir)/tags
	CTAGSF=`ctags --version | grep -iq exuberant && \
		echo "-I __initdata,__exitdata,EXPORT_SYMBOL"`; \
	$(FIND_TAG_FILES_CMD) | xargs ctags $$CTAGSF -a

cscope-recursive:

cscope:
	$(RM) $(top_srcdir)/cscope*.out $(top_srcdir)/cscope.files
	$(FIND_TAG_FILES_CMD) > cscope.files
	cscope -bRq

mkid:
	$(FIND_TAG_FILES_CMD) | xargs mkid


doxygen:  doxygen-api doxygen-ref

doxygen-%: build/doxyfile.%
	   doxygen $<

if MODULES
sources: all-sources

all-sources: $(EXTRA_SOURCES)
	for dir in $(SOURCES_SUBDIRS) ; do \
		$(MAKE) sources -C $$dir || exit $$? ; \
	done

if LINUX
all-am: modules

if !LINUX25
DEP = dep
dep: .depend

.depend: all-sources
	$(MAKE) $(ARCH_UM) CC="$(CC)" -C $(LINUX_OBJ)		     \
	-f $(PWD)/build/Makefile LUSTRE_LINUX_CONFIG=$(LINUX_CONFIG) \
	-o scripts -o include/config/MARKER _sfdep_$(PWD)	     \
	_FASTDEP_ALL_SUB_DIRS="$(PWD)"

CLEANFILES = .depend
endif # !LINUX25

modules: $(DEP) all-sources
	$(MAKE) $(ARCH_UM) CC="$(CC)" -C $(LINUX_OBJ)		     \
	-f $(PWD)/build/Makefile LUSTRE_LINUX_CONFIG=$(LINUX_CONFIG) \
        LINUXINCLUDE='$(EXTRA_LNET_INCLUDE) -I$$(srctree)/arch/$$(SRCARCH)/include -Iinclude $$(if $$(KBUILD_SRC),-Iinclude2 -I$$(srctree)/include) -include include/linux/autoconf.h' \
	$(MODULE_TARGET)=$(PWD) -o tmp_include_depends -o scripts -o \
	include/config/MARKER $@
endif # LINUX

endif # MODULES

dist-hook:
	$(RM) $(distdir)/ldiskfs/*.spec
	$(RM) $(distdir)/lustre-iokit/*.spec
	find $(distdir) -name .deps -o \
			-name CVS -o \
			-name .svn -o \
			-name .git -o \
			-name .#* | xargs rm -rf
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  module-dist-hook

EXTRA_DIST = @PACKAGE_TARNAME@.spec					\
	build/Makefile build/autoMakefile.am.toplevel build/lbuild	\
	build/linux-merge-config.awk build/linux-merge-modules.awk	\
	build/linux-rhconfig.h build/lmake build/Rules.in		\
	build/lustre-kernel-2.4.spec.in build/suse-functions.sh		\
	build/suse-post.sh build/suse-postun.sh				\
	build/suse-trigger-script.sh.in build/README.kernel-source	\
	build/sles8-post.sh build/sles8-postun.sh build/sles8-pre.sh	\
	build/sles8-update_INITRD_MODULES.sh				\
	build/sles8-update_rcfile_setting.sh build/update_oldconfig	\
	build/autoconf/lustre-build-linux.m4				\
	build/autoconf/lustre-build-darwin.m4				\
	build/autoconf/lustre-build.m4 build/rdac_spec                  \
	build/mptlinux.spec.patch build/patches

rpms-real: @PACKAGE_TARNAME@.spec dist Makefile
	rpmbuild -ta $(distdir).tar.gz

srpm-real: @PACKAGE_TARNAME@.spec dist Makefile
	rpmbuild -ts $(distdir).tar.gz

rpms:
	for subdir in $(RPM_SUBDIRS) ; do				\
		echo "Making rpms in $$subdir";				\
		(cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) rpms);		\
		echo "Finished rpms in $$subdir";			\
	done;								\
	$(MAKE) $(AM_MAKEFLAGS) rpms-real

srpm:
	for subdir in $(RPM_SUBDIRS) ; do				\
		echo "Making srpm in $$subdir";				\
		(cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) srpm);		\
		echo "Finished srpms in $$subdir";			\
	done;								\
	$(MAKE) $(AM_MAKEFLAGS) srpm-real

# In the debs target, first make sure what's in the changelog reflects
# the software version.  Here's how we could dig the version out of the
# autoconf version file directly:
# lversion=$$(sed -ne 's/m4_define(\[LUSTRE_[A-Z][A-Z]*\],\[\([0-9][0-9]*\)\])$$/\1/p'
#	lustre/autoconf/lustre-version.ac | tr '\n' '.' | sed -e 's/.$//');
#
# However, one cannot really run "make debs" without having done a
# configure first, so we could use the easier method of digging the
# version out of the config.h file.
debs:
	lversion=$$(sed -ne 's/^#define VERSION "\(.*\)"$$/\1/p' config.h); \
	cversion=$$(sed -ne '1s/^lustre (\(.*\)-[0-9][0-9]*).*$$/\1/p' debian/changelog); \
	if [ "$$lversion" != "$$cversion" ]; then \
		echo -e "1i\nlustre ($$lversion-1) unstable; urgency=low\n\n  * Automated changelog entry update\n\n -- Brian J. Murrell <brian@interlinx.bc.ca>  $$(date -R)\n\n.\nwq" | ed debian/changelog; \
	fi
	dpkg-buildpackage || { \
		rc=$${PIPESTATUS[0]}; \
		[ $${rc} -gt 1 ] && exit $${rc}; \
		exit 0; \
	}
	export KPKG_DEST_DIR="$$(pwd)/.." && \
	version=$$(sed -ne '1s/^lustre (\(.*\)).*$$/\1/p' debian/changelog) && \
	rm -rf debian/tmp/modules-deb && \
	mkdir debian/tmp/modules-deb && \
	cd debian/tmp/modules-deb && \
	dpkg -x ../../../../lustre-source_$${version}_all.deb $$(pwd) && \
	mkdir usr_src/ && \
	tar -C usr_src/ -xjf usr/src/lustre.tar.bz2 && \
	chmod 755 usr_src/modules/lustre/debian/rules && \
	mkdir -p usr_share_modass && \
	ln -s /usr/share/modass/include/ usr_share_modass/ && \
	ln -s /usr/share/modass/packages/ usr_share_modass/ && \
	echo "lustre" > usr_share_modass/compliant.list && \
	export MA_DIR=$$(pwd)/usr_share_modass && \
	m-a build $${KVERS:+-l $$KVERS} -i -u $$(pwd) lustre
